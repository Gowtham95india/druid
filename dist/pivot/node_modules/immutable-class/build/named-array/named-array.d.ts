export interface Nameable {
    name: string;
}
export interface SynchronizerOptions<T> {
    key?: (thing: T, index?: number) => string;
    equals?: (thingA: T, thingB: T) => boolean;
    onEnter?: (newThing: T) => void;
    onUpdate?: (newThing: T, oldThing: T) => void;
    onExit?: (oldThing: T) => void;
}
export declare class NamedArray {
    static isValid<T extends Nameable>(array: T[]): boolean;
    static checkValid<T extends Nameable>(array: T[]): void;
    static get<T extends Nameable>(array: T[], name: string): T;
    static containsByName<T extends Nameable>(array: T[], name: string): boolean;
    static findByNameCI<T extends Nameable>(array: T[], name: string): T;
    static findByName<T extends Nameable>(array: T[], name: string): T;
    static findIndexByName<T extends Nameable>(array: T[], name: string): number;
    static overrideByName<T extends Nameable>(things: T[], thingOverride: T): T[];
    static overridesByName<T extends Nameable>(things: T[], thingOverrides: T[]): T[];
    static deleteByName<T extends Nameable>(array: T[], name: string): T[];
    static synchronize<T>(oldThings: T[], newThings: T[], updatedOptions: SynchronizerOptions<T>): void;
}
