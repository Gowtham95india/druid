"use strict";
var simple_array_1 = require('../simple-array/simple-array');
var equality_1 = require('../equality/equality');
function getName(thing) {
    return thing.name;
}
function noop() { }
var NamedArray = (function () {
    function NamedArray() {
    }
    NamedArray.isValid = function (array) {
        var seen = {};
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var a = array_1[_i];
            var name = a.name;
            if (seen[name])
                return false;
            seen[name] = 1;
        }
        return true;
    };
    NamedArray.checkValid = function (array) {
        var seen = {};
        for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
            var a = array_2[_i];
            var name = a.name;
            if (seen[name])
                throw new Error("duplicate '" + name + "'");
            seen[name] = 1;
        }
    };
    NamedArray.get = function (array, name) {
        return simple_array_1.SimpleArray.find(array, function (x) { return x.name === name; });
    };
    NamedArray.containsByName = function (array, name) {
        return simple_array_1.SimpleArray.contains(array, function (x) { return x.name === name; });
    };
    NamedArray.findByNameCI = function (array, name) {
        var lowerName = name.toLowerCase();
        return simple_array_1.SimpleArray.find(array, function (x) { return x.name.toLowerCase() === lowerName; });
    };
    NamedArray.findByName = function (array, name) {
        return NamedArray.get(array, name);
    };
    NamedArray.findIndexByName = function (array, name) {
        return simple_array_1.SimpleArray.findIndex(array, function (x) { return x.name === name; });
    };
    NamedArray.overrideByName = function (things, thingOverride) {
        var overrideName = thingOverride.name;
        var added = false;
        things = things.map(function (t) {
            if (t.name === overrideName) {
                added = true;
                return thingOverride;
            }
            else {
                return t;
            }
        });
        if (!added)
            things.push(thingOverride);
        return things;
    };
    NamedArray.overridesByName = function (things, thingOverrides) {
        for (var _i = 0, thingOverrides_1 = thingOverrides; _i < thingOverrides_1.length; _i++) {
            var thingOverride = thingOverrides_1[_i];
            things = NamedArray.overrideByName(things, thingOverride);
        }
        return things;
    };
    NamedArray.deleteByName = function (array, name) {
        return array.filter(function (a) { return a.name !== name; });
    };
    NamedArray.synchronize = function (oldThings, newThings, updatedOptions) {
        var key = updatedOptions.key || getName;
        var equals = updatedOptions.equals || equality_1.immutableEqual;
        var onEnter = updatedOptions.onEnter || noop;
        var onUpdate = updatedOptions.onUpdate || noop;
        var onExit = updatedOptions.onExit || noop;
        var initialByKey = Object.create(null);
        for (var i = 0; i < oldThings.length; i++) {
            var initialThing = oldThings[i];
            var initialThingKey = key(initialThing);
            if (initialByKey[initialThingKey])
                throw new Error("duplicate key '" + initialThingKey + "'");
            initialByKey[initialThingKey] = initialThing;
        }
        for (var j = 0; j < newThings.length; j++) {
            var newThing = newThings[j];
            var newThingKey = key(newThing);
            var oldThing = initialByKey[newThingKey];
            if (oldThing) {
                if (!equals(newThing, oldThing)) {
                    onUpdate(newThing, oldThing);
                }
                delete initialByKey[newThingKey];
            }
            else {
                onEnter(newThing);
            }
        }
        for (var k in initialByKey) {
            if (!initialByKey[k])
                continue;
            onExit(initialByKey[k]);
        }
    };
    return NamedArray;
}());
exports.NamedArray = NamedArray;
