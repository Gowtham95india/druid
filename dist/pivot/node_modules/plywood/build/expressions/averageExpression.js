var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
import { Aggregate } from './mixins/aggregate';
export var AverageExpression = (function (_super) {
    __extends(AverageExpression, _super);
    function AverageExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("average");
        this._checkOperandTypes('DATASET');
        this._checkExpressionTypes('NUMBER');
        this.type = 'NUMBER';
    }
    AverageExpression.fromJS = function (parameters) {
        return new AverageExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    AverageExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue ? operandValue.average(this.expression) : null;
    };
    AverageExpression.prototype._getSQLChainableUnaryHelper = function (dialect, operandSQL, expressionSQL) {
        return "AVG(" + dialect.aggregateFilterIfNeeded(operandSQL, expressionSQL) + ")";
    };
    AverageExpression.prototype.decomposeAverage = function (countEx) {
        var _a = this, operand = _a.operand, expression = _a.expression;
        return operand.sum(expression).divide(countEx ? operand.sum(countEx) : operand.count());
    };
    AverageExpression.op = "Average";
    return AverageExpression;
}(ChainableUnaryExpression));
Expression.applyMixins(AverageExpression, [Aggregate]);
Expression.register(AverageExpression);
