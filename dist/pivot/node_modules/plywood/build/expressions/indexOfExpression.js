var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
export var IndexOfExpression = (function (_super) {
    __extends(IndexOfExpression, _super);
    function IndexOfExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("indexOf");
        this._checkOperandTypes('STRING');
        this._checkExpressionTypes('STRING');
        this.type = 'NUMBER';
    }
    IndexOfExpression.fromJS = function (parameters) {
        return new IndexOfExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    IndexOfExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue ? operandValue.indexOf(expressionValue) : null;
    };
    IndexOfExpression.prototype._getJSChainableUnaryHelper = function (operandJS, expressionJS) {
        return Expression.jsNullSafetyBinary(operandJS, expressionJS, (function (a, b) { return (a + ".indexOf(" + b + ")"); }), operandJS[0] === '"', expressionJS[0] === '"');
    };
    IndexOfExpression.prototype._getSQLChainableUnaryHelper = function (dialect, operandSQL, expressionSQL) {
        return dialect.indexOfExpression(operandSQL, expressionSQL);
    };
    IndexOfExpression.op = "IndexOf";
    return IndexOfExpression;
}(ChainableUnaryExpression));
Expression.register(IndexOfExpression);
