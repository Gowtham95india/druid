var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { r, Expression, ChainableUnaryExpression } from './baseExpression';
import { LiteralExpression } from './literalExpression';
import { Range } from '../datatypes/range';
export var LessThanExpression = (function (_super) {
    __extends(LessThanExpression, _super);
    function LessThanExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("lessThan");
        this._checkOperandTypes('NUMBER', 'TIME', 'STRING');
        this._checkExpressionTypes('NUMBER', 'TIME', 'STRING');
        this._bumpOperandExpressionToTime();
        this._checkOperandExpressionTypesAlign();
        this.type = 'BOOLEAN';
    }
    LessThanExpression.fromJS = function (parameters) {
        return new LessThanExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    LessThanExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue < expressionValue;
    };
    LessThanExpression.prototype._getJSChainableUnaryHelper = function (operandJS, expressionJS) {
        return "(" + operandJS + "<" + expressionJS + ")";
    };
    LessThanExpression.prototype._getSQLChainableUnaryHelper = function (dialect, operandSQL, expressionSQL) {
        return "(" + operandSQL + "<" + expressionSQL + ")";
    };
    LessThanExpression.prototype.specialSimplify = function () {
        var _a = this, operand = _a.operand, expression = _a.expression;
        if (expression instanceof LiteralExpression) {
            return operand.in(r(Range.fromJS({ start: null, end: expression.value, bounds: '()' })));
        }
        if (operand instanceof LiteralExpression) {
            return expression.in(r(Range.fromJS({ start: operand.value, end: null, bounds: '()' })));
        }
        return this;
    };
    LessThanExpression.op = "LessThan";
    return LessThanExpression;
}(ChainableUnaryExpression));
Expression.register(LessThanExpression);
