var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableExpression } from './baseExpression';
export var NotExpression = (function (_super) {
    __extends(NotExpression, _super);
    function NotExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("not");
        this._checkOperandTypes('BOOLEAN');
        this.type = 'BOOLEAN';
    }
    NotExpression.fromJS = function (parameters) {
        return new NotExpression(ChainableExpression.jsToValue(parameters));
    };
    NotExpression.prototype._calcChainableHelper = function (operandValue) {
        return !operandValue;
    };
    NotExpression.prototype._getJSChainableHelper = function (operandJS) {
        return "!(" + operandJS + ")";
    };
    NotExpression.prototype._getSQLChainableHelper = function (dialect, operandSQL) {
        return "NOT(" + operandSQL + ")";
    };
    NotExpression.prototype.specialSimplify = function () {
        var operand = this.operand;
        if (operand instanceof NotExpression)
            return operand.operand;
        return this;
    };
    NotExpression.op = "Not";
    return NotExpression;
}(ChainableExpression));
Expression.register(NotExpression);
