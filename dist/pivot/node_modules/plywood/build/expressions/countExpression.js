var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableExpression } from './baseExpression';
import { Aggregate } from './mixins/aggregate';
export var CountExpression = (function (_super) {
    __extends(CountExpression, _super);
    function CountExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("count");
        this._checkOperandTypes('DATASET');
        this.type = 'NUMBER';
    }
    CountExpression.fromJS = function (parameters) {
        return new CountExpression(ChainableExpression.jsToValue(parameters));
    };
    CountExpression.prototype.calc = function (datum) {
        var inV = this.operand.calc(datum);
        return inV ? inV.count() : 0;
    };
    CountExpression.prototype._getSQLChainableHelper = function (dialect, operandSQL) {
        return operandSQL.indexOf(' WHERE ') === -1 ? "COUNT(*)" : "SUM(" + dialect.aggregateFilterIfNeeded(operandSQL, '1') + ")";
    };
    CountExpression.op = "Count";
    return CountExpression;
}(ChainableExpression));
Expression.applyMixins(CountExpression, [Aggregate]);
Expression.register(CountExpression);
