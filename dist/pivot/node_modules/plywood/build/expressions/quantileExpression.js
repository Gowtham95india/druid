var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
import { Aggregate } from './mixins/aggregate';
export var QuantileExpression = (function (_super) {
    __extends(QuantileExpression, _super);
    function QuantileExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("quantile");
        this._checkOperandTypes('DATASET');
        this._checkExpressionTypes('NUMBER');
        this.value = parameters.value;
        this.type = 'NUMBER';
    }
    QuantileExpression.fromJS = function (parameters) {
        var value = ChainableUnaryExpression.jsToValue(parameters);
        value.value = parameters.value || parameters.quantile;
        return new QuantileExpression(value);
    };
    QuantileExpression.prototype.valueOf = function () {
        var value = _super.prototype.valueOf.call(this);
        value.value = this.value;
        return value;
    };
    QuantileExpression.prototype.toJS = function () {
        var js = _super.prototype.toJS.call(this);
        js.value = this.value;
        return js;
    };
    QuantileExpression.prototype.equals = function (other) {
        return _super.prototype.equals.call(this, other) &&
            this.value === other.value;
    };
    QuantileExpression.prototype._toStringParameters = function (indent) {
        return [this.expression.toString(indent), String(this.value)];
    };
    QuantileExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue ? operandValue.quantile(this.expression, this.value) : null;
    };
    QuantileExpression.op = "Quantile";
    return QuantileExpression;
}(ChainableUnaryExpression));
Expression.applyMixins(QuantileExpression, [Aggregate]);
Expression.register(QuantileExpression);
