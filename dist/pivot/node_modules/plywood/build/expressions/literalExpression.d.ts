import { PlyType, DatasetFullType } from '../types';
import { Expression, ExpressionValue, ExpressionJS } from './baseExpression';
import { SQLDialect } from '../dialect/baseDialect';
import { PlywoodValue, ComputeFn, Datum } from '../datatypes/index';
export declare class LiteralExpression extends Expression {
    static op: string;
    static fromJS(parameters: ExpressionJS): LiteralExpression;
    value: any;
    constructor(parameters: ExpressionValue);
    valueOf(): ExpressionValue;
    toJS(): ExpressionJS;
    toString(): string;
    getFn(): ComputeFn;
    calc(datum: Datum): PlywoodValue;
    getJS(datumVar: string): string;
    getSQL(dialect: SQLDialect): string;
    equals(other: LiteralExpression): boolean;
    updateTypeContext(typeContext: DatasetFullType): DatasetFullType;
    getLiteralValue(): any;
    maxPossibleSplitValues(): number;
    bumpStringLiteralToTime(): Expression;
    bumpStringLiteralToSetString(): Expression;
    upgradeToType(targetType: PlyType): Expression;
}
