import { Timezone, Duration } from 'chronoshift';
import { ExpressionJS, ExpressionValue, Expression, ChainableExpression } from './baseExpression';
import { HasTimezone } from './mixins/hasTimezone';
import { SQLDialect } from '../dialect/baseDialect';
import { PlywoodValue } from '../datatypes/index';
export declare class TimeShiftExpression extends ChainableExpression implements HasTimezone {
    static DEFAULT_STEP: number;
    static op: string;
    static fromJS(parameters: ExpressionJS): TimeShiftExpression;
    duration: Duration;
    step: number;
    timezone: Timezone;
    constructor(parameters: ExpressionValue);
    valueOf(): ExpressionValue;
    toJS(): ExpressionJS;
    equals(other: TimeShiftExpression): boolean;
    protected _toStringParameters(indent?: int): string[];
    protected _calcChainableHelper(operandValue: any): PlywoodValue;
    protected _getJSChainableHelper(operandJS: string): string;
    protected _getSQLChainableHelper(dialect: SQLDialect, operandSQL: string): string;
    protected changeStep(step: int): Expression;
    specialSimplify(): Expression;
    getTimezone: () => Timezone;
    changeTimezone: (timezone: Timezone) => TimeShiftExpression;
}
