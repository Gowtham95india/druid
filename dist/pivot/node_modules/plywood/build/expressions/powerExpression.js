var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
export var PowerExpression = (function (_super) {
    __extends(PowerExpression, _super);
    function PowerExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("power");
        this._checkOperandTypes('NUMBER');
        this._checkExpressionTypes('NUMBER');
        this.type = 'NUMBER';
    }
    PowerExpression.fromJS = function (parameters) {
        return new PowerExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    PowerExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return Math.pow((operandValue || 0), (expressionValue || 0));
    };
    PowerExpression.prototype._getJSChainableUnaryHelper = function (operandJS, expressionJS) {
        return "Math.pow(" + operandJS + "," + expressionJS + ")";
    };
    PowerExpression.prototype._getSQLChainableUnaryHelper = function (dialect, operandSQL, expressionSQL) {
        return "POW(" + operandSQL + "," + expressionSQL + ")";
    };
    PowerExpression.prototype.specialSimplify = function () {
        var _a = this, operand = _a.operand, expression = _a.expression;
        if (expression.equals(Expression.ZERO))
            return Expression.ONE;
        if (expression.equals(Expression.ONE))
            return operand;
        return this;
    };
    PowerExpression.op = "Power";
    return PowerExpression;
}(ChainableUnaryExpression));
Expression.register(PowerExpression);
