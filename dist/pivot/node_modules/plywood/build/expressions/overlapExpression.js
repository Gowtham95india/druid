var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
import { wrapSetType } from '../datatypes/common';
import { Set } from '../datatypes/set';
export var OverlapExpression = (function (_super) {
    __extends(OverlapExpression, _super);
    function OverlapExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("overlap");
        if (!this.expression.canHaveType('SET')) {
            throw new Error(this.op + " must have an expression of type SET (is: " + this.expression.type + ")");
        }
        var oType = this.operand.type;
        var eType = this.expression.type;
        if (oType && eType && oType !== 'NULL' && oType !== 'SET/NULL' && eType !== 'NULL' && eType !== 'SET/NULL') {
            if (wrapSetType(oType) !== wrapSetType(eType)) {
                throw new Error("overlap expression has type mismatch between " + oType + " and " + eType);
            }
        }
        this.type = 'BOOLEAN';
    }
    OverlapExpression.fromJS = function (parameters) {
        return new OverlapExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    OverlapExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        if (expressionValue == null)
            return null;
        return operandValue instanceof Set ? operandValue.overlap(expressionValue) : expressionValue.contains(operandValue);
    };
    OverlapExpression.prototype.isCommutative = function () {
        return true;
    };
    OverlapExpression.prototype.specialSimplify = function () {
        var _a = this, operand = _a.operand, expression = _a.expression;
        if (expression.equals(Expression.EMPTY_SET))
            return Expression.FALSE;
        if ('SET/' + operand.type === expression.type)
            return operand.in(expression);
        return this;
    };
    OverlapExpression.op = "Overlap";
    return OverlapExpression;
}(ChainableUnaryExpression));
Expression.register(OverlapExpression);
