var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableExpression } from './baseExpression';
export var SubstrExpression = (function (_super) {
    __extends(SubstrExpression, _super);
    function SubstrExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this.position = parameters.position;
        this.len = parameters.len;
        this._ensureOp("substr");
        this._checkOperandTypes('STRING', 'SET/STRING');
        this.type = this.operand.type;
    }
    SubstrExpression.fromJS = function (parameters) {
        var value = ChainableExpression.jsToValue(parameters);
        value.position = parameters.position;
        value.len = parameters.len || parameters.length;
        return new SubstrExpression(value);
    };
    SubstrExpression.prototype.valueOf = function () {
        var value = _super.prototype.valueOf.call(this);
        value.position = this.position;
        value.len = this.len;
        return value;
    };
    SubstrExpression.prototype.toJS = function () {
        var js = _super.prototype.toJS.call(this);
        js.position = this.position;
        js.len = this.len;
        return js;
    };
    SubstrExpression.prototype.equals = function (other) {
        return _super.prototype.equals.call(this, other) &&
            this.position === other.position &&
            this.len === other.len;
    };
    SubstrExpression.prototype._toStringParameters = function (indent) {
        return [String(this.position), String(this.len)];
    };
    SubstrExpression.prototype._calcChainableHelper = function (operandValue) {
        var _a = this, position = _a.position, len = _a.len;
        if (operandValue === null)
            return null;
        return operandValue.substr(position, len);
    };
    SubstrExpression.prototype._getJSChainableHelper = function (operandJS) {
        var _a = this, position = _a.position, len = _a.len;
        return "(_=" + operandJS + ",_==null?null:(''+_).substr(" + position + "," + len + "))";
    };
    SubstrExpression.prototype._getSQLChainableHelper = function (dialect, operandSQL) {
        return "SUBSTR(" + operandSQL + "," + (this.position + 1) + "," + this.len + ")";
    };
    SubstrExpression.op = "Substr";
    return SubstrExpression;
}(ChainableExpression));
Expression.register(SubstrExpression);
