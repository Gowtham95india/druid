var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
import { Aggregate } from './mixins/aggregate';
import { wrapSetType } from '../datatypes/common';
export var CollectExpression = (function (_super) {
    __extends(CollectExpression, _super);
    function CollectExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("collect");
        this._checkOperandTypes('DATASET');
        this._checkExpressionTypes('BOOLEAN', 'NUMBER', 'TIME', 'STRING', 'NUMBER_RANGE', 'TIME_RANGE', 'STRING_RANGE');
        this.type = wrapSetType(this.expression.type);
    }
    CollectExpression.fromJS = function (parameters) {
        return new CollectExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    CollectExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue ? operandValue.collect(this.expression) : null;
    };
    CollectExpression.op = "Collect";
    return CollectExpression;
}(ChainableUnaryExpression));
Expression.applyMixins(CollectExpression, [Aggregate]);
Expression.register(CollectExpression);
