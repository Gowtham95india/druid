var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableExpression } from './baseExpression';
export var LengthExpression = (function (_super) {
    __extends(LengthExpression, _super);
    function LengthExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("length");
        this._checkOperandTypes('STRING');
        this.type = 'NUMBER';
    }
    LengthExpression.fromJS = function (parameters) {
        return new LengthExpression(ChainableExpression.jsToValue(parameters));
    };
    LengthExpression.prototype._calcChainableHelper = function (operandValue) {
        return operandValue ? operandValue.length : null;
    };
    LengthExpression.prototype._getJSChainableHelper = function (operandJS) {
        return Expression.jsNullSafetyUnary(operandJS, function (input) { return (input + ".length"); });
    };
    LengthExpression.prototype._getSQLChainableHelper = function (dialect, operandSQL) {
        return dialect.lengthExpression(operandSQL);
    };
    LengthExpression.op = "Length";
    return LengthExpression;
}(ChainableExpression));
Expression.register(LengthExpression);
