var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Expression, ChainableUnaryExpression } from './baseExpression';
import { TimeRange, NumberRange } from '../datatypes/index';
import { IndexOfExpression } from './indexOfExpression';
import { TimeBucketExpression } from './timeBucketExpression';
import { NumberBucketExpression } from './numberBucketExpression';
import { FallbackExpression } from './fallbackExpression';
export var IsExpression = (function (_super) {
    __extends(IsExpression, _super);
    function IsExpression(parameters) {
        _super.call(this, parameters, dummyObject);
        this._ensureOp("is");
        this._checkOperandExpressionTypesAlign();
        this.type = 'BOOLEAN';
    }
    IsExpression.fromJS = function (parameters) {
        return new IsExpression(ChainableUnaryExpression.jsToValue(parameters));
    };
    IsExpression.prototype._calcChainableUnaryHelper = function (operandValue, expressionValue) {
        return operandValue === expressionValue;
    };
    IsExpression.prototype._getJSChainableUnaryHelper = function (operandJS, expressionJS) {
        return "(" + operandJS + "===" + expressionJS + ")";
    };
    IsExpression.prototype._getSQLChainableUnaryHelper = function (dialect, operandSQL, expressionSQL) {
        return dialect.isNotDistinctFromExpression(operandSQL, expressionSQL);
    };
    IsExpression.prototype.isCommutative = function () {
        return true;
    };
    IsExpression.prototype.specialSimplify = function () {
        var _a = this, operand = _a.operand, expression = _a.expression;
        if (operand.equals(expression))
            return Expression.TRUE;
        var literalValue = expression.getLiteralValue();
        if (literalValue) {
            if (operand instanceof IndexOfExpression && literalValue === -1) {
                var x = operand.operand, y = operand.expression;
                return x.contains(y).not();
            }
            if (operand instanceof TimeBucketExpression && literalValue instanceof TimeRange && operand.timezone) {
                var x = operand.operand, duration = operand.duration, timezone = operand.timezone;
                if (literalValue.start !== null && TimeRange.timeBucket(literalValue.start, duration, timezone).equals(literalValue)) {
                    return x.in(expression);
                }
                else {
                    return Expression.FALSE;
                }
            }
            if (operand instanceof NumberBucketExpression && literalValue instanceof NumberRange) {
                var x = operand.operand, size = operand.size, offset = operand.offset;
                if (literalValue.start !== null && NumberRange.numberBucket(literalValue.start, size, offset).equals(literalValue)) {
                    return x.in(expression);
                }
                else {
                    return Expression.FALSE;
                }
            }
            if (operand instanceof FallbackExpression) {
                var x = operand.operand, y = operand.expression;
                if (y.isOp('literal') && !y.equals(expression)) {
                    return this.changeOperand(x);
                }
            }
        }
        return this;
    };
    IsExpression.op = "Is";
    return IsExpression;
}(ChainableUnaryExpression));
Expression.register(IsExpression);
