import * as Q from 'q';
import { Expression, ApplyExpression, LimitExpression, SortExpression, SplitExpression, FilterExpression } from '../expressions/index';
import { Attributes } from '../datatypes/attributeInfo';
import { External, ExternalValue, QueryAndPostProcess } from './baseExternal';
import { SQLDialect } from '../dialect/baseDialect';
export declare abstract class SQLExternal extends External {
    static type: string;
    dialect: SQLDialect;
    constructor(parameters: ExternalValue, dialect: SQLDialect);
    canHandleTotal(): boolean;
    canHandleFilter(filter: FilterExpression): boolean;
    canHandleSplit(split: SplitExpression): boolean;
    canHandleSplitExpression(ex: Expression): boolean;
    canHandleApply(apply: ApplyExpression): boolean;
    canHandleSort(sort: SortExpression): boolean;
    canHandleLimit(limit: LimitExpression): boolean;
    canHandleHavingFilter(havingFilter: FilterExpression): boolean;
    getQueryAndPostProcess(): QueryAndPostProcess<string>;
    protected abstract getIntrospectAttributes(): Q.Promise<Attributes>;
}
