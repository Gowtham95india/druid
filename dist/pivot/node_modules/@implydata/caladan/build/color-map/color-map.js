"use strict";var __extends=this&&this.__extends||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)};var ReactDOM=require("react-dom");var React=require("react");var Color=require("color");var transparentColorsCache={};var alphaize=function(color,alpha){var key=color+"-"+alpha;if(!transparentColorsCache[key]){transparentColorsCache[key]=Color(color).alpha(alpha).rgbString()}return transparentColorsCache[key]};var ColorMap=function(_super){__extends(ColorMap,_super);function ColorMap(){_super.call(this);this.state={}}ColorMap.specialize=function(){return ColorMap};ColorMap.prototype.getCanvas=function(){return ReactDOM.findDOMNode(this.refs["my-canvas"])};ColorMap.prototype.clean=function(){var canvas=this.getCanvas();canvas.getContext("2d").clearRect(0,0,canvas.width,canvas.height);this.tilesForIndices={}};ColorMap.prototype.componentDidMount=function(){if(this.getCanvas()){this.clean();this.draw()}};ColorMap.prototype.draw=function(){var _a=this.props,tileHeight=_a.tileHeight,tileWidth=_a.tileWidth,tiles=_a.tiles,alpha=_a.alpha;var ctx=this.getCanvas().getContext("2d");var colorFn=function(tile){return tile.color};if(alpha){colorFn=function(tile){var newAlpha=alpha(tile);if(newAlpha===1)return tile.color;return alphaize(tile.color,newAlpha)}}var n=tiles.length;for(var i=0;i<n;i++){var tile=tiles[i];var columnIndex=tile.columnIndex,rowIndex=tile.rowIndex;this.tilesForIndices[columnIndex+"-"+rowIndex]=tile;ctx.fillStyle=colorFn(tile);ctx.fillRect(columnIndex*tileWidth,rowIndex*tileHeight,tileWidth,tileHeight)}};ColorMap.prototype.componentDidUpdate=function(){if(this.getCanvas()){this.clean();this.draw()}};ColorMap.prototype.getIndicesFromEvent=function(event){var _a=this.props,tileHeight=_a.tileHeight,tileWidth=_a.tileWidth;var _b=event.nativeEvent,offsetX=_b.offsetX,offsetY=_b.offsetY;var columnIndex=Math.floor(offsetX/tileWidth);var rowIndex=Math.floor(offsetY/tileHeight);return{rowIndex:rowIndex,columnIndex:columnIndex}};ColorMap.prototype.onClick=function(event){var _a=this.props,onClick=_a.onClick,tiles=_a.tiles;if(!onClick)return;var _b=this.getIndicesFromEvent(event),rowIndex=_b.rowIndex,columnIndex=_b.columnIndex;onClick(this.tilesForIndices[columnIndex+"-"+rowIndex])};ColorMap.prototype.onMouseMove=function(event){var _a=this.props,onMouseMove=_a.onMouseMove,tiles=_a.tiles;if(!onMouseMove)return;var _b=this.getIndicesFromEvent(event),rowIndex=_b.rowIndex,columnIndex=_b.columnIndex;var tile=this.tilesForIndices[columnIndex+"-"+rowIndex];this.setState({hovered:true});onMouseMove(tile)};ColorMap.prototype.onMouseLeave=function(){var onMouseLeave=this.props.onMouseLeave;if(!onMouseLeave)return;this.setState({hovered:false});onMouseLeave()};ColorMap.prototype.render=function(){var _a=this.props,width=_a.width,height=_a.height,onMouseMove=_a.onMouseMove,onClick=_a.onClick,onMouseLeave=_a.onMouseLeave;var hovered=this.state.hovered;return React.createElement("canvas",{ref:"my-canvas",className:"color-map "+(hovered?"actionable":""),onClick:this.onClick.bind(this),onMouseMove:this.onMouseMove.bind(this),onMouseLeave:this.onMouseLeave.bind(this),width:width,height:height})};return ColorMap}(React.Component);exports.ColorMap=ColorMap;