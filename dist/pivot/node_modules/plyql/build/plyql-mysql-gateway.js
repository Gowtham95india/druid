"use strict";
var Q = require('q');
var plywood_1 = require("plywood");
var variables_1 = require('./variables');
var mysql_gateway_1 = require('./mysql-gateway');
var plyql_executor_1 = require("./plyql-executor");
function printError(sql, err) {
    console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
    console.log('Failed to resolve query with Plywood.');
    console.log('Query:');
    console.log(sql);
    console.log('If you believe this query should work please create an issue on PlyQL and include this section');
    console.log('Issue url: https://github.com/implydata/plyql/issues');
    console.log('Message:');
    console.log(err.message);
    console.log('Stack:');
    console.log(err.stack);
    console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
}
function plyqlMySQLGateway(port, context, timezone, fallbackURI) {
    var fallbackMySQL = fallbackURI ? mysql_gateway_1.fallbackMySQLFactory(fallbackURI) : null;
    mysql_gateway_1.createMySQLGateway(port, function (parameters, conn) {
        var sql = parameters.sql, connectionId = parameters.connectionId;
        Q.fcall(function () {
            var myContext = context;
            var match;
            if ((/SELECT\s+@@/i).test(sql)) {
                sql = sql.replace(/@@(?:global\.|session\.)?/g, '');
                myContext = {
                    data: variables_1.getVariablesFlatDataset()
                };
            }
            if (match = sql.match(/USE\s+`/i)) {
                sql = "SET NAMES 'utf8'";
            }
            if (match = sql.match(/SELECT\s+(CONNECTION_ID\(\s*\))/i)) {
                return {
                    type: 'connectionId',
                    name: match[1]
                };
            }
            var sqlParse;
            try {
                sqlParse = plywood_1.Expression.parseSQL(sql);
            }
            catch (e) {
                printError(sql, e);
                return {
                    type: 'error',
                    code: 1064,
                    message: e.message
                };
            }
            if (!sqlParse.verb) {
                return {
                    type: 'error',
                    code: 1064,
                    message: "Must have a verb"
                };
            }
            switch (sqlParse.verb) {
                case 'SET':
                    return {
                        type: 'ok'
                    };
                case 'SELECT':
                    return plyql_executor_1.executeSQLParse(sqlParse, myContext, timezone)
                        .then(function (dataset) {
                        if (plywood_1.Dataset.isDataset(dataset)) {
                            return {
                                type: 'dataset',
                                dataset: dataset,
                                table: sqlParse.table
                            };
                        }
                        else {
                            throw new Error('unexpected result from expression');
                        }
                    });
                default:
                    return {
                        type: 'error',
                        code: 1337,
                        message: "Permission to " + sqlParse.verb + " denied"
                    };
            }
        })
            .then(function (result) {
            switch (result.type) {
                case 'ok':
                    conn.writeOk();
                    break;
                case 'error':
                    conn.writeError({ code: result.code, message: result.message });
                    break;
                case 'dataset':
                    var dataset = result.dataset;
                    var plyColumns = dataset.getColumns().map(function (c) { return mysql_gateway_1.columnToMySQL(c, result.table); });
                    var plyRows = dataset.flatten().map(function (row) {
                        var newRow = {};
                        for (var k in row) {
                            var v = row[k];
                            if (v && v.start)
                                v = v.start;
                            if (v && v.toISOString) {
                                v = mysql_gateway_1.dateToSQL(v);
                            }
                            else if (plywood_1.Set.isSet(v)) {
                                v = v.toString();
                            }
                            else if (typeof v === 'boolean') {
                                v = Number(v);
                            }
                            newRow[k] = v;
                        }
                        return newRow;
                    });
                    conn.writeTextResult(plyRows, plyColumns);
                    break;
                case 'connectionId':
                    var name_1 = result.name;
                    var row = {};
                    row[name_1] = connectionId;
                    conn.writeTextResult([row], [
                        {
                            catalog: 'def',
                            schema: '',
                            name: 'CONNECTION_ID()',
                            orgName: 'CONNECTION_ID()',
                            table: '',
                            orgTable: '',
                            characterSet: 33,
                            columnLength: 500,
                            columnType: 0x8,
                            flags: 32896,
                            decimals: 0
                        }
                    ]);
                    break;
                default:
                    throw new Error("unexpected result " + result['type']);
            }
        })
            .catch(function (err) {
            printError(sql, err);
            if (fallbackMySQL) {
                fallbackMySQL(sql, conn);
            }
            else {
                conn.writeError({ code: 1337, message: 'Something broke' });
            }
        })
            .done();
    });
}
exports.plyqlMySQLGateway = plyqlMySQLGateway;
